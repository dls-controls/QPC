# digitelQpcIonp.template
#% macro, __doc__, Template database for digitel MPC - Ion Pump
# Pete Owens - 30/9/03
#
# substitutions:
#% macro, device, device name
#% macro, name, Object name and gui association name
#% macro, port, asyn serial port number
#% macro, unit, unit number for multi-drop serial (2 hex digits - 05 by default)
#% macro, pump, ion pump number (1, 2, 3, 4)
#% macro, size, pump size (l/s)
#% macro, spon, setpoint on
#% macro, spoff, setpoint off
#% macro, display, label on controller screen
#% macro, alh,  alarm handler tag (Defaults to None) c.f. mp49's commit 80833
#% macro, text, Text to display in the ion pump controller window.
################################################################################

# This associates an edm screen with the template
# % gui, $(name=), edm, digitelQpcIonp2sp.edl, device=$(device)

# This associates BOY screens with the template
# % gui, $(name=), boydetail, digitelQpcApp_opi/ionp_detail.opi, device=$(device), desc=$(device), name=$(name=)
# % gui, $(name=), boyembed, digitelQpcApp_opi/ionp_embed_box.opi, device=$(device), desc=$(device), name=$(name=)
# % gui, $(name=), boyembed, digitelQpcApp_opi/ionp_embed.opi, device=$(device), desc=$(device), name=$(name=)

# These define what PVs a valve detail screen should contain
# % gui, $(name=), readback, Status,   $(device):STA
# % gui, $(name=), readback, Error Code,  $(device):ERR
# % gui, $(name=), readback, Voltage,  $(device):V
# % gui, $(name=), readback, Current,  $(device):I
# % gui, $(name=), readback, Strapping,  $(device):HV
# % gui, $(name=), enum, Start,  $(device):START
# % gui, $(name=), readback, Pump Size,  $(device):SIZE
# % gui, $(name=), demand, Pump Size,  $(device):SETSIZE
# % gui, $(name=), readback, Calibration,  $(device):CAL
# % gui, $(name=), demand, Calibration,  $(device):SETCAL
# % gui, $(name=), readback, Setpoint 1 On,  $(device):SP1ON
# % gui, $(name=), demand, Setpoint 1 On,  $(device):SETSP1ON
# % gui, $(name=), readback, Setpoint 1 Off,  $(device):SP1OFF
# % gui, $(name=), demand, Setpoint 1 Off,  $(device):SETSP1OFF
# % gui, $(name=), readback, Setpoint 2 On,  $(device):SP2ON
# % gui, $(name=), demand, Setpoint 2 On,  $(device):SETSP2ON
# % gui, $(name=), readback, Setpoint 2 Off,  $(device):SP2OFF
# % gui, $(name=), demand, Setpoint 2 Off,  $(device):SETSP2OFF

################################################################################
# Automatically Restart on power up
#
record(bo, "$(device):SETAUTOST")
{
    field(DESC, "Auto Restart")
    field(DTYP, "stream")
    field(OUT,  "@digitelQpc.proto setautost($(unit=01),$(pump)) $(port)")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(DOL,  "0")
    field(PINI, "YES")
}
#
#% controldesk Auto Restart smon
#
record(bi, "$(device):AUTOST")
{
    field(DESC, "Auto Restart")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto autost($(unit=01),$(pump)) $(port)")
    field(SCAN, "10 second")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

################################################################################
# Switch on/off HV
#
record(bo, "$(device):SETHV")
{
    field(DESC, "HV On / Off")
    field(DTYP, "stream")
    field(OUT,  "@digitelQpc.proto sethv($(unit=01),$(pump)) $(port)")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(DOL,  "0")
    field(PINI, "YES")
}

# Read pump current
#
#% controldesk Current readback
#
record(ai, "$(device):I") {
    field(DESC, "Pump Current")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto getCurrent($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(EGU,  "A")
    field(LOPR, "0.0")
    field(HOPR, "10.0")
    field(PREC, "1")
}


################################################################################
# Read pump pressure
#
#% archiver 10 Monitor
#% controldesk Pressure readback
#
record(ai, "$(device):P") {
    field(DESC, "Pump Pressure")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto getPressure($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(FLNK, "$(device):PLOG")
    field(EGU,  "mbar")
    field(HOPR, "1000")
    field(LOPR, "1.0E-12")
    field(PREC, "11")
}
record(calcout, "$(device):ADEL")
{
    field(DESC, "deadband")
    field(CALC, "A/B")
    field(OUT,  "$(device):P.ADEL")
    field(INPA, "$(device):P")
#    field(INPB, "4")
#    field(INPB, "3")
    field(INPB, "2")
    field(SCAN, "10 second")
}
#
#% archiver 1 Monitor
#
record(calc, "$(device):PLOG")
{
    field(DESC, "log Pressure")
    field(EGU,  "log")
    field(CALC, "LOG(A)")
    field(INPA, "$(device):P MS")
    field(HOPR, "3")
    field(LOPR, "-12")
#    field(ADEL, "0.1")
#    field(ADEL, "0.125")
#    field(ADEL, "0.176")
    field(ADEL, "0.25")
}
################################################################################
# Read pump voltage
#
#% controldesk Voltage readback
#
record(longin, "$(device):V") {
    field(DESC, "Pump Voltage")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto getVoltage($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(EGU,  "V")
    field(LOPR, "0")
    field(HOPR, "10")
}

################################################################################
# Get supply status
#
#% archiver 10 Monitor
#% controldesk Supply Status smon
#% $(alh=None) $SEVRCOMMAND UP_ANY dls-alh-handler.py $(device):STA
record(mbbi, "$(device):STA")
{
    field(DESC, "Supply Status")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto getStatus($(unit),$(pump),$(device):ERROR) $(port)")
    field(SCAN, "1 second")
    field(ZRST, "Standby")
    field(ONST, "Starting")
    field(TWST, "Running")
    field(THST, "Cool Down")
    field(FRST, "Pump Error")
    field(FVST, "Invalid")
    field(SXST, "Invalid")
    field(SVST, "Invalid")
    field(EIST, "Invalid")
    field(NIST, "Invalid")
    field(TEST, "Invalid")
    field(ELST, "Invalid")
    field(TVST, "Invalid")
    field(TTST, "Invalid")
    field(FTST, "Invalid")
    field(FFST, "Invalid")
    field(UNSV, "MAJOR")
    field(ZRSV, "MAJOR")
    field(ONSV, "MAJOR")
    field(TWSV, "MAJOR")
    field(THSV, "MAJOR")
    field(FRSV, "NO_ALARM")
    field(FVSV, "MINOR")
    field(SXSV, "MAJOR")
    field(SVSV, "MAJOR")
    field(EISV, "MAJOR")
    field(NISV, "MAJOR")
    field(TESV, "MAJOR")
    field(ELSV, "MAJOR")
    field(TVSV, "MAJOR")
    field(TTSV, "MAJOR")
    field(FTSV, "MAJOR")
    field(FFSV, "MAJOR")
    field(FLNK, "$(device):ERRSEL")
}

record(seq, "$(device):ERRSEQ")
{
    field(DESC, "Get Error if applicable")
    field(SCAN, "Passive")
    field(SELM, "Specified")
    field(SELN, "1")
    field(DOL1, "0")
    field(LNK1, "$(device):ERR PP MS")
    field(DOL2, "$(device):ERRGET PP MS")
    field(LNK2, "$(device):ERR PP MS")
}

record(longin, "$(device):ERRGET")
{
    field(DESC, "Get Error Code")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto err($(unit),$(pump)) $(port)")
    field(SCAN, "Passive")
}

record(calcout, "$(device):ERRSEL")
{
    field(DESC, "Choose which error source")
    field(INPA, "$(device):STA MS")
    field(CALC, "A>=3?2:1")
    field(OUT, "$(device):ERRSEQ.SELN PP MS")
}

#
#% archiver 10 Monitor
#% controldesk Error Code smon
#
record(mbbi, "$(device):ERR")
{
    field(DESC, "Error Code")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(ZRST, "OK")
    field(ONST, "Too many cycles")
    field(TWST, "High pressure")
    field(THST, "High current")
    field(FRST, "High pressure")
    field(FVST, "Pump power")
    field(SXST, "High current")
    field(SVST, "Short circuit")
    field(EIST, "Malfunction")
    field(NIST, "Low voltage")
    field(TEST, "Arc detect")
    field(ELST, "11")
    field(TVST, "12")
    field(TTST, "13")
    field(FTST, "14")
    field(FFST, "15")
    field(UNSV, "MINOR")
    field(ZRSV, "NO_ALARM")
    field(ONSV, "MINOR")
    field(TWSV, "MINOR")
    field(THSV, "MINOR")
    field(FRSV, "MINOR")
    field(FVSV, "MINOR")
    field(SXSV, "MINOR")
    field(SVSV, "MINOR")
    field(EISV, "MINOR")
    field(NISV, "MINOR")
    field(TESV, "MINOR")
    field(ELSV, "MINOR")
    field(TVSV, "MINOR")
    field(TTSV, "MINOR")
    field(FTSV, "MINOR")
    field(FFSV, "MINOR")
}
################################################################################
# Pump size
#
#% archiver 10 Monitor
#% controldesk Pump Size readback
#
record(longin, "$(device):SIZE") {
    field(DESC, "Pump Size")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto getPumpSize($(unit),$(pump)) $(port)")
    field(SCAN, "10 second")
    field(EGU,  "l/s")
    field(LOPR, "0")
    field(HOPR, "1200")
}
#
#% archiver 10 Monitor
#% controldesk Pump Size setpoint
#
record(ao, "$(device):SETSIZE") {
    field(DESC, "Pump Size")
    field(DTYP, "stream")
    field(OUT,  "@digitelQpc.proto setPumpSize($(unit),$(pump)) $(port)")
    field(PINI, "YES")
    field(DOL,  "$(size)")
    field(EGU,  "l/s")
    field(DRVL, "0")
    field(DRVH, "1200")
    field(LOPR, "0")
    field(HOPR, "1200")
    field(PREC, "0")
}
################################################################################
# Calibration factor
#
#% archiver 10 Monitor
#% controldesk Calibration Factor readback
#
record(ai, "$(device):CAL") {
    field(DESC, "Calibration Factor")
    field(DTYP, "stream")
    field(INP,  "@digitelQpc.proto cal($(unit),$(pump)) $(port)")
    field(SCAN, "10 second")
    field(LOPR, "0.0")
    field(HOPR, "9.99")
    field(PREC, "2")
}
#
#% archiver 10 Monitor
#% controldesk Calibration Factor setpoint
#
record(ao, "$(device):SETCAL") {
    field(DESC, "Calibration Factor")
    field(DTYP, "stream")
    field(OUT,  "@digitelQpc.proto setcal($(unit),$(pump)) $(port)")
    field(DRVL, "0.0")
    field(DRVH, "9.99")
    field(LOPR, "0.0")
    field(HOPR, "9.99")
    field(PREC, "2")
}
################################################################################
# Start
#
#% archiver 10 Monitor
#% controldesk Supply Status scon
#
record(bo, "$(device):START")
{
    field(DESC, "HV on/off")
    field(DTYP, "stream")
    field(OUT,  "@digitelQpc.proto start($(unit),$(pump)) $(port)")
    field(ZNAM, "Stop")
    field(ONAM, "Start")
}
record(bi,"$(device):STARTING")
{
    field(DESC, "Starting Pumps")
    field(PINI, "YES")
    field(INP,  "0")
    field(ZNAM, "")
    field(ONAM, "Starting")
}

################################################################################
# Setpoints
#
# The QPC controller has eight setpoints; 1-4 are relays, 5-8 are digital outputs.
# Each setpoint has associated with it an ON pressure, an OFF pressure and a supply.
# Each pump on the controller is allocated one of the setpoints.
# The following table describes the mapping of controller setpoints and supplies to
# each pump.
# I Gillingham: April 2015
#
#  Pump number   Pump_Setpoint Controller_Setpoint   Supply  
#      1             1                   1             1
#      2             1                   2             2
#      3             1                   3             3
#      4             1                   4             4

## ----------------- SP1 -------------------------------
#
###################################################################
# Pump set point readbacks for on/off pressures and relay/digital out status
# These records are really only good for 1 set point but the database is good
# for 1 of the controllers pump supplies.
record(ai, "$(device):SPON"){
	field(DESC, "Reads Pump on press for pump $(PMP)")
	field(PINI, "YES")
	field(SCAN, "5 second")
	field(DTYP, "stream")
	field(INP, "@digitelQpc.proto getOnPressSpt($(SPT)) $(DEVICE)")
    field(PREC,"1")
}
record(ai, "$(device):SPOFF"){
	field(DESC, "Reads Pump off press for pump $(PMP)")
	field(PINI, "YES")
	field(SCAN, "5 second")
	field(DTYP, "stream")
	field(INP, "@digitelQpc.proto getOffPressSpt($(SPT)) $(DEVICE)")
    field(PREC,"1")
}
record(bi, "$(device):SPSTAT") {
	field(DESC, "Read Spt$(SPT) status for pump $(PMP)")
	field(PINI, "YES")
	field(SCAN, "5 second")
	field(DTYP, "stream")
	field(INP, "@digitelQpc.proto getSptStatus($(SPT)) $(DEVICE)")
	field(OSV, "MAJOR")
	field(ZNAM, "Setpoint Off")
	field(ONAM, "Setpoint On")
}
###################################################################
# Pump set point on pressure set
# CAUTION: Setting this to a value greater than the off pressure will
#	   cause the off pressure to be readjusted (by the pump firmware)
#	   so that the off pressure will be 20% greater than the on pressure
#	   The same does not hold true for setting the off pressure but insetad
#	   the controller will simply return an error.
record(ao, "$(device):SETSPON") {
	field(DESC, "Set setpoint on pressure")
	field(DTYP, "stream")
	field(OUT, "@digitelQpc.proto setOnPress($(SPLY),$(SPT),$(SYSTEM),$(PMP)) $(DEVICE)")
	field(OMSL, "supervisory")
	field(DRVH,"1.0E-4")
	field(DRVL,"1.0e-11")
    field(PREC,"1")
    field(FLNK,"$(device):SPMSG.PROC PP NMS")
}
############################################################
# Set the off pressure
# This is a bit more tricky than setting on pressure in order to avoid the return
# error message.
# Must be set between 1.0E-4 and 1.0E-11
# Must be at least 20% > than on pressure
# INPA - Reserved for user input of desired off pressure
############################################################
record(calcout,"$(device):SETSPOFF") {
        field(DESC,"Set off pressure")
        field(CALC,"(A>=(B+B*0.2))?((A<D)&&(A>C))?A:2:1")
        field(INPB,"$(device):SPON.VAL NPP NMS")
        field(INPC,"$(device):SENDSPOFF.DRVL NPP NMS")
        field(INPD,"$(device):SENDSPOFF.DRVH NPP NMS")
        field(INPE,"$(device):SPOFF.VAL NPP NMS")
        field(OUT,"$(device):CHECKOFF.PROC PP NMS")
        field(OOPT,"Every Time")
        field(DOPT,"Use CALC")
        field(PREC,"1")
}
# For the record above:
# A means a pressure at least 20% > than on pressure and within range
# 2 means the entered off pressure is not within the valid range
# 1 means the entered off pressure is not 20% > than on pressure
######################################################################
# Check for a value between zero and one and send to device only if true
# otherwise device will report an error. This allows better control over sending
# the message to the QPC to try and not generate an error.
######################################################################
record(calcout,"$(device):CHECKOFF) {
        field(DESC,"Set off pressure")
        field(CALC,"(A<1&&A>0)?A:0")
        field(INPA,"$(device):SETSPOFF.VAL NPP NMS")
        field(OUT,"$(device):SENDSPOFF.VAL PP NMS")
        field(OOPT,"When Non-zero")
        field(DOPT,"Use CALC")
        field(FLNK,"$(device):CREATEOFFMSG.PROC PP NMS")
}
# Sends a valid off pressure command
record(ao, "$(device):SENDSPOFF") {
	field(DESC, "send SP Off pressure")
	field(DTYP, "stream")
	field(OUT, "@digitelQpc.proto setOffPress($(SPLY),$(SPT),$(SYSTEM),$(PMP)) $(DEVICE)")
	field(OMSL, "supervisory")
	field(DRVH,"1.0E-4")
	field(DRVL,"1.0e-11")
}
# Create a off set point range message for user display and forward it to
# the actual message generator (SPOFFMSG.CC)
record(scalcout,"$(device):CREATEOFFMSG") {
        field(DESC,"Generates messages")
        field(CALC,"A=2?AA+$P('%.1e',E)+BB+$P('%.1e',F):A")
        field(INPA,"$(device):SETSPOFF.VAL NPP NMS")
        field(INPB,"$(device):CHECKOFF.VAL NPP NMS")
        field(INPE,"$(device):SENDSPOFF.DRVH NPP NMS")
        field(INPF,"$(device):SENDSPOFF.DRVL NPP NMS")
        field(AA,"Off Spt must be < ")
        field(BB," & > ")
        field(OUT,"$(device):SPOFFMSG.CC PP NMS")
        field(OOPT,"Every Time")
}
# Message to user about sending off set point pressure value
# Probelm is with the CC message, in order to print values of E & F the calc
# gets too long
record(scalcout,"$(device):SPOFFMSG") {
        field(DESC,"Generates messages")
        field(CALC,"A=1?BB:A=2?CC:B#0?AA:DD")
        field(INPA,"$(device):SETSPOFF.VAL NPP NMS")
        field(INPB,"$(device):CHECKOFF.VAL NPP NMS")
        field(AA,"Off Setpoint Sent")
        field(BB,"Off Spt must be 20% > than On")
        field(DD," ")
        field(OUT,"$(device):SPOFFMSG.VAL PP NMS")
        field(OOPT,"Every Time")
}
record(stringin, "$(device):SPOFFMSG")
{
	field(DESC, "Display Off Spt Mesg")
	field(INP, " ")
}
record(stringin, "$(device):SPMSG")
{
	field(DESC, "Display Spt Error Mesg")
	field(INP, " ")
}

################################################################################
# Text error message
#
record(stringin, "$(device):ERROR") 
    {
    field(DESC, "Last error message")
    }

record(stringin, "$(device):INFO")
{
    field(DESC, "QPC Pump Info Text")
    field(SCAN, "Passive")
}
