# digitelMpc.proto
# Stream Device Protocol for Gamma Vacuum Digitel MPC
# This protocol uses features defined in Stream Device 2
#
# Pete Owens 17-10-07
#
# Message format is:
#      <START>" "<ADR>" "<CMD>" "<DATA>" "<CKSUM><TERM>
# where
#      <START> : Start character(1 byte) = '~'
#      <ADR>   : Address(2 bytes) - address of unit in hex (defalut = 05)
#      <CMD>   : Command code (2 bytes) - hex
#      <DATA>  : Optional - depends on <CMD>
#      <CHK>   : Checksum (2 bytes) - hex
#      <TERM>  : Terminator character (1 byte) = '\r'
#
# Reply format is:
#      <ADR>" "<STA>" "<CODE>" "<DATA>" "<CKSUM><TERM>
# where
#      <ADR>   : Address(2 bytes) - address of unit in hex (default = 05)
#      <STA>   : Status Mnemonic(2 bytes) "OK" or "ER"
#      <CODE>  : Response code(2 bytes) Error number
#      <DATA>  : Optional - depends on <CMD>
#      <CHK>   : Checksum (2 bytes) - hex
#      <TERM>  : Terminator character (1 byte) = '\r'#
#
# Arguments:
# $1 = address: (2 hex digits - default 05){1|2|3|4}
# $2 = parameter: (ion pump/filament (1,2 or 3)


locktimeout = 5000;
terminator   = CR;
replytimeout = 1000;
readtimeout  = 1000;
extrainput   = Ignore;

#
# Controller Protocols
#
model     { out "~ \$1 01 %01<sum8>"            ; in "\$1 OK %*2x %[^0-9.]"            ; }
version   { out "~ \$1 02 %01<sum8>"            ; in "\$1 OK %*2x %*s %*s %s %0<sum8>" ; }
reset     { out "~ \$1 FF %1d %01<sum8>"        ; }

#
# Ion Pump Protocols
#
linev     { out "~ \$1 0C \$2 %01<sum8>"        ; in "\$1 OK %*2x %d %0<sum8>"              ; }
autost    { out "~ \$1 34 \$2 %01<sum8>"        ; in "\$1 OK %*2x %{NO|YES} %0<sum8>"       ; }
setautost { out "~ \$1 33 \$2, %{N|Y} %01<sum8>"; in "\$1 OK %*2x %0<sum8>"                 ; }
sethv     { out "~ \$1 %{38|37} \$2 %01<sum8>"  ; in "\$1 OK %*2x %0<sum8>"                 ; }
current   { out "~ \$1 0A \$2 %01<sum8>"        ; in "\$1 OK %*2x %g %*{AMPS|Amps} %0<sum8>"; }
pressure  { out "~ \$1 0B \$2 %01<sum8>"        ; in "\$1 OK %*2x %g %*s %0<sum8>"          ; }
voltage   { out "~ \$1 0C \$2 %01<sum8>"        ; in "\$1 OK %*2x %d %0<sum8>"              ; }
status    { out "~ \$1 0D \$2,00 %01<sum8>"     ; in "\$1 OK %*2x %2d"                      ; @mismatch {in "\$1 OK %*2x %(\$3.VAL)s %0<sum8>";} }
err       { out "~ \$1 0D \$2,00 %01<sum8>"     ; in "\$1 OK %*2x %*[^0-9]%d %0<sum8>"      ; }
size      { out "~ \$1 11 \$2 %01<sum8>"        ; in "\$1 OK %*2x %d L/S %0<sum8>"          ; }
cal       { out "~ \$1 1D \$2 %01<sum8>"        ; in "\$1 OK %*2x %f %0<sum8>"              ; }
# <== got to here:


#
# Protection Setpoint Commands
# Parameter 1) Unit number   2) Device base name    3) Logical setpoint number for this pump (1 only for QPC).
# It is important to derive the setpoint set value at iocInit, so consider using @init handler.
#
# QPC Command:
# N
# N - setpoint number (1-8, but specifically 1-4 for relays)
getsps    { out "~ \$1 3B %(\$2:SPNUM\$3)1d %01<sum8>";
			in  "\$1 OK %*2x %*i,%*i,%*i,%(\$2:SP\$3ON.VAL)g,%(\$2:SP\$3OFF.VAL)g,%(\$2:SP\$3STATE)i %0<sum8>";
			@mismatch { in "%*d %*{OK|ER} %*2x %(\$2:INFO)#s %0<sum8>"; };
		  }
		  
# INPA => Setpoint ON pressure
# INPB => Setpoint OFF pressure
# INPC => Source (usually equivalent to pump [1|2|3|4])
# INPD => Lower pressure working limit
# INPE => Upper pressure working limit
# INPF => Setpoint interlock number [1..4]
#
# QPC Command:
# N, F, S, XXE-XX, YY-YY
# N - setpoint number (1-8, but specifically 1-4 for relays)
# F - function: 0 = Off, 1 = Pressure Setpoint, 2 = HV Errors, 3 = HV On/Off Indicator
#
setsps    { out "~ \$1 3B %(F)1d,1,%(C)1d,%(A)2.2E,%(B)2.2E %01<sum8>";
            in  "\$1 OK %*2x %*i,%*i,%*i,%(\$2:SP\$3ON.VAL)g,%(\$2:SP\$3OFF.VAL)g,%(\$2:SP\$3STATE)i %0<sum8>";
            @mismatch { in "%*d %*{OK|ER} %*2x %(\$2:INFO)#s %0<sum8>"; };
            @init { getsps; } 
          }


setsize   { out "~ \$1 12 \$2,%d %01<sum8>"     ; in "\$1 OK %*2x %0<sum8>"            ; }
setcal    { out "~ \$1 1E \$2,%4.2f %01<sum8>"  ; in "\$1 OK %*2x %0<sum8>"            ; }
#settext   { out "~ \$1 ED \$2,%s %01<sum8>"     ; in "\$1 OK %*2x %0<sum8>"            ; }
# ignore errors from old syle units that do not implement this protocol
settext   { out "~ \$1 ED \$2,\"%s\" %01<sum8>"     ; in "\$1 "                            ; }

start     { out "~ \$1 %{38|37} \$2 %01<sum8>"  ; in "\$1 OK %*2x %0<sum8>"; @mismatch { in "%*d %*{OK|ER} %*2x %(\$2:INFO)#s %0<sum8>"; };}

#
# TSP Protocols
#
#tspsta    { out "~ \$1 DE %01<sum8>"            ; in "\$1 OK %*2x %d %0<sum8>"             ; }
tspsta    { out "~ \$1 DE %01<sum8>"            ; in "\$1 OK %*2x %?d"             ; }
#filsta    { out "~ \$1 E9 \$2 %01<sum8>"        ; in "\$1 OK %*2x %{1|2|3|4|5|6}:%*s %0<sum8>" ; }
filsta    { out "~ \$1 E9 \$2 %01<sum8>"        ; in "\$1 OK %*2x %{1|2|3|4|5|6|*ERROR}" ; }
power     { out "~ \$1 74 %01<sum8>"            ; in "\$1 OK %*2x %?g W %0<sum8>"           ; @mismatch {in "\$1 OK %*2x %?g %0<sum8>";} }
fil       { out "~ \$1 DA %01<sum8>"            ; in "\$1 OK %*2x %{1|2|3|4} %0<sum8>"; @mismatch {in "\$1 OK %*2x %?d %0<sum8>";} }
#fil       { out "~ \$1 DA %01<sum8>"            ; in "\$1 OK %*2x %{1|2|3|4} %0<sum8>"     ; }
left      { out "~ \$1 2A %01<sum8>"            ; in "\$1 OK %*2x %d,"
                                                     "1-%(\$2:FIL1:USED.VAL)d,"
                                                     "2-%(\$2:FIL2:USED.VAL)d,"
                                                     "3-%(\$2:FIL3:USED.VAL)d,"
                                                     "4-%(\$2:FIL4:USED.VAL)d %0<sum8>"    ; @mismatch {in "\$1 OK %*2x %?d %0<sum8>";} }

setpower  { out "~ \$1 E2 %d,W %01<sum8>"       ; in "\$1 OK %*2x %0<sum8>"                ; }
autofil   { out "~ \$1 2C %{NO|YES} %01<sum8>"  ; in "\$1 OK %*2x %0<sum8>"                ; }
ctlsrc    { out "~ \$1 8B %d %01<sum8>"         ; in "\$1 OK %*2x %0<sum8>"                ; }
thresh    { out "~ \$1 EA %3.1E %01<sum8>"      ; in "\$1 OK %*2x %0<sum8>"                ; }
setfil    { out "~ \$1 29 %{1|2|3|4} %01<sum8>" ; in "\$1 OK %*2x %0<sum8>"                ; }

tspoff    { out "~ \$1 28 %01<sum8>"            ; in "\$1 OK %*2x %0<sum8>"                ; }
clear     { out "~ \$1 2B %01<sum8>"            ; in "\$1 OK %*2x %0<sum8>"                ; }

getconfig { out "~ \$1 87 %01<sum8>"            ; in "\$1 OK %*2x %{0|1|2|3|4|5|6|7|8} %0<sum8>" ; @mismatch {in "\$1 OK %*2x %?d %0<sum8>";}}

#debug
debug { ExtraInput = Ignore; out "~ %s %01<sum8>"; in "%*d %*{OK|ER} %*2x %s %0<sum8>";}








